
//NFT1 section
// ######################################################################################################################################################################
const contractConfig = {
  addressOrName: CONTRACT_ADDRESS,
  contractInterface: abiFile,
};

    const [imgURL, setImgURL] = useState('');
    const { writeAsync: mint, error: mintError } = useContractWrite({
      ...contractConfig,
      functionName: 'mint',
    });
    const [mintLoading, setMintLoading] = useState(false);
    const [mintedTokenId, setMintedTokenId] = useState(null);
    const [mintAmount, setMintQuantity] = useState(1);

    const [newCost, setNewCost] = useState('');

    const { writeAsync: pauseContract, error: pauseError } = useContractWrite({
      ...contractConfig,
      functionName: 'pause',
    });



      const calculateTotalPrice = () => {
        const pricePerToken = parseFloat(cost);
        return ethers.utils.parseEther((mintAmount * pricePerToken).toString());
      };


      const maxSupply = 777;
      const remainingSupply = maxSupply - totalSupply;


    const { writeAsync: setNewCostFn, error: setNewCostError } = useContractWrite({
    ...contractConfig,
    functionName: 'setCost',
  });

    const handleIncrement = () => {
      setMintQuantity((prevQuantity) => Math.min(prevQuantity + 1, 100));
    };

    const handleDecrement = () => {
      setMintQuantity((prevQuantity) => Math.max(prevQuantity - 1, 1));
    };

    const onMintClick = async () => {
      try {
        setMintLoading(true);
        const totalPrice = calculateTotalPrice();

        const tx = await mint({
          args: [mintAmount, { value: totalPrice }],
        });

        await tx.wait();
        toast.success('Mint successful! You can view your NFT soon.');
      } catch (error) {
        console.error(error);
        toast.error('Mint unsuccessful! Please try again.');
      } finally {
        setMintLoading(false);
      }
    };









    const [imgURL, setImgURL] = useState('');
    const { writeAsync: mint, error: mintError } = useContractWrite({
      ...contractConfig,
      functionName: 'mint',
    });
    const [mintLoading, setMintLoading] = useState(false);
    const { address } = useAccount();
    const isConnected = !!address;
    const [mintedTokenId, setMintedTokenId] = useState(null);
    const [mintAmount, setMintQuantity] = useState(1);

    const [newCost, setNewCost] = useState('');

    const { writeAsync: pauseContract, error: pauseError } = useContractWrite({
      ...contractConfig,
      functionName: 'pause',
    });

    const onSetCostClick = async () => {
      try {
        // Convert the new cost value to Wei
        const newCostValueInWei = ethers.utils.parseUnits(newCost.toString(), 'wei');

        // Call the setCost function in the contract
        const tx = await setNewCostFn({
          args: [newCostValueInWei],
        });

        await tx.wait();
        toast.success('Cost updated successfully!');
      } catch (error) {
        console.error(error);
        toast.error('Failed to update cost. Please try again.');
      }
    };

    const onTogglePauseClick = async () => {
      try {
        // Toggle the pause state
        const newState = !isPaused;

        // Call the pause function in the contract
        const tx = await pauseContract({
          args: [newState],
        });

        await tx.wait();
        toast.success(`Contract is now ${newState ? 'paused' : 'resumed'}`);
      } catch (error) {
        console.error(error);
        toast.error('Failed to toggle pause state. Please try again.');
      }
    };






    useEffect(() => {
      async function fetchContractData() {
        try {
          const provider = new ethers.providers.JsonRpcProvider('https://bsc-dataseed.binance.org/');
          const contract = new ethers.Contract(CONTRACT_ADDRESS, abiFile, provider);
          const name = await contract.name();
          const supply = await contract.totalSupply();
          setContractName(name);
          setTotalSupply(supply.toNumber());
        } catch (error) {
          console.error('Error fetching contract data:', error);
        } finally {
          setLoading(false);
        }
      }

      fetchContractData();
    }, []);

    const [contractBalance, setContractBalance] = useState(0);

    useEffect(() => {
      async function fetchContractBalance() {
        try {
          const provider = new ethers.providers.JsonRpcProvider('https://bsc-dataseed.binance.org/');
          const contract = new ethers.Contract(CONTRACT_ADDRESS, abiFile, provider);

          // Read the balance directly from the contract address
          const balance = await provider.getBalance(CONTRACT_ADDRESS);

          // Convert BigNumber to number before setting the state
          setContractBalance(balance.toNumber());
        } catch (error) {
          console.error('Error fetching contract balance:', error);
        }
      }

      fetchContractBalance();
    }, []);

  const [cost, setCost] = useState('0');

  useEffect(() => {
    async function fetchCost() {
      try {
        const provider = new ethers.providers.JsonRpcProvider('https://bsc-dataseed.binance.org/');
        const contract = new ethers.Contract(CONTRACT_ADDRESS, abiFile, provider);

        // Read the cost value directly from the contract
        const costValue = await contract.cost();

        // Convert Wei to Ether and set the state
        setCost(ethers.utils.formatEther(costValue));
      } catch (error) {
        console.error('Error fetching cost:', error);
      }
    }

    fetchCost();
  }, []);

  const [isPaused, setIsPaused] = useState(false);

  useEffect(() => {
    async function fetchPauseStatus() {
      try {
        const provider = new ethers.providers.JsonRpcProvider('https://bsc-dataseed.binance.org/');
        const contract = new ethers.Contract(CONTRACT_ADDRESS, abiFile, provider);

        // Read the paused status directly from the contract
        const pausedStatus = await contract.paused();

        setIsPaused(pausedStatus);
      } catch (error) {
        console.error('Error fetching paused status:', error);
      }
    }

    fetchPauseStatus();
  }, []);

  const [isRevealed, setIsRevealed] = useState(false);

    useEffect(() => {
      async function fetchRevealStatus() {
        try {
          const provider = new ethers.providers.JsonRpcProvider('https://bsc-dataseed.binance.org/');
          const contract = new ethers.Contract(CONTRACT_ADDRESS, abiFile, provider);

          // Read the revealed status directly from the contract
          const revealedStatus = await contract.revealed();

          setIsRevealed(revealedStatus);
        } catch (error) {
          console.error('Error fetching revealed status:', error);
        }
      }

      fetchRevealStatus();
    }, []);



    const { writeAsync: revealCollection, error: revealError } = useContractWrite({
      ...contractConfig,
      functionName: 'reveal',
    });

    const onRevealClick = async () => {
      try {
        // Check if the collection is already revealed
        if (isRevealed) {
          toast.info('Collection is already revealed!');
          return;
        }

        // Call the reveal function in the contract
        const tx = await revealCollection();

        await tx.wait();
        toast.success('Collection revealed successfully!');
        setIsRevealed(true); // Update the local state to reflect that the collection is revealed
      } catch (error) {
        console.error(error);
        toast.error('Failed to reveal collection. Please try again.');
      }
    };
  // ######################################################################################################################################################################
