
    // ######################################################################################################################################################################
        // 6month
    // ##################################
    // unstake tokens 6month
    // ##################################

        const { writeAsync: Unstake6Months } = useContractWrite({
          ...tokenContractConfig,
          functionName: 'Unstake6Months',
        });
        const onUnstake6MonthsClick = async () => {
          try {
            const tx = await Unstake6Months();
            await tx.wait();
            toast.success('Unstaking successful!');
          } catch (error) {
            console.error(error);
            toast.error('Unstaking failed. Please Check your Unlock Date in dapp.');
          }
        };


        // ##################################
            // State for staking amount
            // ##################################
             const [stakeAmount6Months, setStakeAmount6Months] = useState('');

             // Contract write hook for staking in the token contract
             const { writeAsync: stakeFor6Months } = useContractWrite({
               ...tokenContractConfig,
               functionName: 'StakeFor6Months',
             });

             // Function to handle staking
             const onStakeClick6Months = async () => {
               try {
                 if (!stakeAmount6Months) {
                   toast.error('Please enter an amount to stake.');
                   return;
                 }

                 // Convert the stake amount to Wei
                 const stakeAmount6MonthsInWei = ethers.utils.parseUnits(stakeAmount6Months, 'wei');

                 // Call the StakeFor6Months function in the contract
                 const tx = await stakeFor6Months({
                   args: [stakeAmount6MonthsInWei],
                 });

                 await tx.wait();
                 toast.success('Staking successful!');
               } catch (error) {
                 console.error(error);
                 toast.error('Staking failed. Please try again.');
               }
             };

    // ##################################
      // is the user staked
      // ##################################


        const [userStaked6Months, setUserStaked6Months] = useState('Loading...');

        useEffect(() => {
         const fetchUserStaked6MonthsStatus = async () => {
           if (address) {
             try {
               const provider = new ethers.providers.Web3Provider(window.ethereum);
               const tokenContract = new ethers.Contract(TOKEN_ADDRESS, tokenAbi, provider);

               const isStaked = await tokenContract._isStaked6Months(address);
               setUserStaked6Months(isStaked.toString());
             } catch (error) {
               console.error('Error fetching staking status:', error);
               setUserStaked6Months('Error');
             }
           }
         };

         fetchUserStaked6MonthsStatus();
       }, [address]); // Fetch staking status when the address changes






         // amount staked 3 month pool
           const [tokensStaked6Months, setTokensStaked6Months] = useState('Loading...');

           useEffect(() => {
              const fetchTokensStaked6Months = async () => {
                if (address) {
                  try {
                    const provider = new ethers.providers.Web3Provider(window.ethereum);
                    const tokenContract = new ethers.Contract(TOKEN_ADDRESS, tokenAbi, provider);

                    const tokens = await tokenContract.tokensStaked6Months(address);
                    setTokensStaked6Months(ethers.utils.formatUnits(tokens, 'ether')); // Adjust based on your token's decimals
                  } catch (error) {
                    console.error('Error fetching tokens staked for 1 month:', error);
                    setTokensStaked6Months('Error');
                  }
                }
              };

              fetchTokensStaked6Months();
            }, [address]); // Fetch when the address changes


         // available balance after staking locks
         const [availableBalance6Months, setAvailableBalance6Months] = useState('Loading...');

         useEffect(() => {
           const fetchBalances6Months = async () => {
             if (address) {
               try {
                 const provider = new ethers.providers.Web3Provider(window.ethereum);
                 const tokenContract = new ethers.Contract(TOKEN_ADDRESS, tokenAbi, provider);

                 const [balance, tokensStaked6Months] = await Promise.all([
                   tokenContract.balanceOf(address),
                   tokenContract.tokensStaked6Months(address),
                 ]);

                 const available = balance.sub(tokensStaked6Months);
                 // Format balance and set it to 2 decimal places
                 const formattedAvailable = ethers.utils.formatUnits(available, 'ether');
                 setAvailableBalance6Months(parseFloat(formattedAvailable).toFixed(2)); // Now the balance is a string with 2 decimal places
               } catch (error) {
                 console.error('Error fetching balances:', error);
                 setAvailableBalance6Months('Error');
               }
             }
           };

           fetchBalances6Months();
         }, [address]); // Fetch when the address changes



           const [unlockTime6Months, setUnlockTime6Months] = useState('Loading...');

           useEffect(() => {
             const fetchUnlockTime6Months = async () => {
               if (address) {
                 try {
                   const provider = new ethers.providers.Web3Provider(window.ethereum);
                   const tokenContract = new ethers.Contract(TOKEN_ADDRESS, tokenAbi, provider);

                   const stakedTimestamp6Months = await tokenContract._staked1MonthTimestamp(address);
                   const currentBlock = await provider.getBlock('latest');
                   const currentTime = currentBlock.timestamp;

                   const timeDiff = stakedTimestamp6Months - currentTime;
                   if (timeDiff <= 0) {
                     setUnlockTime6Months('Unlocked');
                     return;
                   }

                   const days = Math.floor(timeDiff / (24 * 3600));
                   const hours = Math.floor((timeDiff % (24 * 3600)) / 3600);
                   const minutes = Math.floor((timeDiff % 3600) / 60);
                   const seconds = Math.floor(timeDiff % 60);

                   setUnlockTime6Months(`${days} days, ${hours} hours, ${minutes} minutes, ${seconds} seconds`);
                 } catch (error) {
                   console.error('Error fetching unlock time:', error);
                   setUnlockTime6Months('Error');
                 }
               }
             };

             fetchUnlockTime6Months();
           }, [address]);



           const [stakedTimestamp6Months, setStakedTimestamp6Months] = useState('Loading...');

           useEffect(() => {
             const fetchStakedTimestamp6Months = async () => {
               if (address) {
                 try {
                   const provider = new ethers.providers.Web3Provider(window.ethereum);
                   const tokenContract = new ethers.Contract(TOKEN_ADDRESS, tokenAbi, provider);

                   const timestamp = await tokenContract._staked1MonthTimestamp(address);
                   const date = new Date(timestamp.toNumber() * 1000).toLocaleString(); // Convert timestamp to readable date
                   setStakedTimestamp6Months(date);
                 } catch (error) {
                   console.error('Error fetching staked timestamp:', error);
                   setStakedTimestamp6Months('Error');
                 }
               }
             };

             fetchStakedTimestamp6Months();
           }, [address]);


           const [stakedBlockNumber6Months, setStakedBlockNumber6Months] = useState('Loading...');

           useEffect(() => {
            const fetchStakedBlockNumber6Months = async () => {
              if (address) {
                try {
                  const provider = new ethers.providers.Web3Provider(window.ethereum);
                  const tokenContract = new ethers.Contract(TOKEN_ADDRESS, tokenAbi, provider);

                  const stakedTimestamp6MonthsBN = await tokenContract._staked1MonthTimestamp(address);
                  const stakedTimestamp6Months = stakedTimestamp6MonthsBN.toNumber();

                  const currentBlock = await provider.getBlock('latest');
                  const currentTimestamp = currentBlock.timestamp;
                  const currentBlockNumber = currentBlock.number;

                  // Estimate the block number of the staked timestamp
                  const blockDifference = (stakedTimestamp6Months - currentTimestamp) / BLOCK_RATE_SECONDS;
                  const estimatedStakedBlockNumber6Months = currentBlockNumber + Math.round(blockDifference);

                  setStakedBlockNumber6Months(estimatedStakedBlockNumber6Months.toString());
                } catch (error) {
                  console.error('Error fetching staked block number:', error);
                  setStakedBlockNumber6Months('Error');
                }
              }
            };

            fetchStakedBlockNumber6Months();
          }, [address]);

            const [unlockDate6Months, setUnlockDate6Months] = useState('Loading...');

            useEffect(() => {
             const fetchUnlockDate6Months = async () => {
               if (address) {
                 try {
                   const provider = new ethers.providers.Web3Provider(window.ethereum);
                   const tokenContract = new ethers.Contract(TOKEN_ADDRESS, tokenAbi, provider);

                   const stakedTimestamp6MonthsBN = await tokenContract._staked1MonthTimestamp(address);
                   const stakedTimestamp6Months = stakedTimestamp6MonthsBN.toNumber();

                   // Add 30 days to the staked timestamp
                   const unlockTime6Monthsstamp = new Date(stakedTimestamp6Months * 1000);
                   unlockTime6Monthsstamp.setDate(unlockTime6Monthsstamp.getDate() + 30);

                   setUnlockDate6Months(unlockTime6Monthsstamp.toLocaleDateString());
                 } catch (error) {
                   console.error('Error fetching unlock date:', error);
                   setUnlockDate6Months('Error');
                 }
               }
             };

             fetchUnlockDate6Months();
           }, [address]);


    // ######################################################################################################################################################################



      <TabPanel>
        <Box minH="350px">
        <Box
          display='flex'
          flexDirection='column'
          alignItems='center'
          justifyContent='center'
          marginTop='4'
          style={{ backgroundColor: '' }} // Light dark grey color
          >

          <div style={{ fontSize: '24px', fontWeight: 'bold', textAlign: 'center', marginBottom: '20px' }}>
            90 Day Staking Pool
          </div>

    {/* Staking Section */}
    <Box display='flex' flexDirection='column' alignItems='center' justifyContent='center' marginTop='4'>
    <Input
    placeholder='Enter amount to stake 30 Days'
    value={stakeAmount6Months}
    onChange={(e) => setStakeAmount6Months(e.target.value)}
    size='md'
    width='250px'
    />
    <Button
    onClick={onStakeClick6Months}
    marginTop='2'
    textColor='white'
    bg='Blue'
    _hover={{ bg: 'Blue' }}
    >
    Stake for 90 Days
    </Button>
    </Box>
    {/* Unstake Section */}
    <Box display='flex' flexDirection='column' alignItems='center' justifyContent='center' marginTop='4'>
    <Button
    onClick={onUnstake6MonthsClick}
    textColor='white'
    bg='Blue'
    _hover={{ bg: 'Blue' }}
    >
    Unstake
    </Button>
    </Box>
    <div>90 Day active Stake: {userStaked6Months}</div>
    <div>Your Tokens Staked for 1 Month: {tokensStaked6Months}</div>
    <div>Staked on: {stakedTimestamp6Months}</div>
    <div>Unlock Date: {unlockDate6Months}</div>

    </Box>
        </Box>
      </TabPanel>
